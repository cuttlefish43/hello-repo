//Basic git commands to get started
******************************************************************************************************************************
step 1:
start with any folder in your file system. using cd pathname...
******************************************************************************************************************************
******************************************************************************************************************************
step 2:
create files, folders , project you want.
******************************************************************************************************************************
******************************************************************************************************************************
step 3: {staging}
staging area contains files,folders that are created/edited and are ready to commit
to the repository.
for staging we need to use following commands
git add filename                //adds given file to staging area,filename should be given with proper extension
git status			// to check current status of the file. if the file is successfully added then 
				//the file will be highlighted in green. if unsuccessful then that will be in red.
git rm --cached filename	//if you want to remove any file from staging area then use this command
git add .			// to add all created/edited files at once
git restore filename		// to undo all edits/changes in given file
******************************************************************************************************************************
******************************************************************************************************************************
step 4: {commiting}
git commit -m "message"		//commits all the staged files with your message/reason/purpose/anything you want to inform
******************************************************************************************************************************
******************************************************************************************************************************
step 5:{logs/history}
git log				//displays history of previous commits
git log --oneline		//displays history in short format
******************************************************************************************************************************
******************************************************************************************************************************
step 6:{checkout,revert,reset}
git checkout commit_ID		//goes back to the status of the repository where that(ref to commit ID) was committed.
git checkout main		//comes back to present latest commit status of the repository.
				//NOTE: checkout does not delete the commit.
git revert commit_ID		//undoes the given commit (ref to commit_ID) from the repository.
				//this is safe option as we can revert back to reverted commit if we changed our mind.
git reset commit_ID		//this is like factory reset option. all the commits from the given commit(ref to commit_ID)
				//are permanently deleted/removed and cannot be traced again.
******************************************************************************************************************************
******************************************************************************************************************************
******************************************************************************************************************************
//Little advanced git commands
Step 1: Creating branches
git branch branchname		//creates a branch. A branch provides user to create new feature that can be added to the present
				//code depending upon its status i.e if feature works ir not. we can perform commiting on given 
				//just like we did on master branch. remember: master branch is the main branch of repository.
git branch -a			//to display all branches and present working branch.(status decided by *)
git checkout branchname		//to switch to the branch we want to work on.
git checkout main		//to switch back to main branch.
git checkout -b branchname	//to switch to the new branch we want to work on. this way we can directly create and switch to that
				//branch.
git branch -D branchname	//to delete any branch we want to. But while deleting any branch, first switch back to master branch.
******************************************************************************************************************************
******************************************************************************************************************************
Step 2: Merging branches
git checkout main		//make sure we are at master branch.
git merge branchname		//merging a branch to the main branch.
git branch -d branchname	//to delete/remove merged branch.
******************************************************************************************************************************
******************************************************************************************************************************
Step 3: Dealing with branch conflicts
When two or more branches try to edit or play with same code area of the master branch, there arises branch conflict.
To deal with that, manually edit that code/content in conflited area of the master branch.
Then add and commit it(without giving any message). that's it.
******************************************************************************************************************************
******************************************************************************************************************************
//Pushing the local repository to github
******************************************************************************************************************************
******************************************************************************************************************************
******************************************************************************************************************************
step 1:
login to personal github account where we will push the local repository.
Create a new repository using new keyword. Give it a name. Copy the link pointing to the github repository.
Note that copied url has an extension of .git. If not then add manually.
******************************************************************************************************************************
******************************************************************************************************************************
step 2:
git push copiedurl main	//will push the local repository [with only master branch] to github.
				//but it will first prompt github username and password.
git remote add origin copiedurl	//this command sets an alias for copiedurl so that we don't have to remember the url everytime
				//we push new commits to this repository
******************************************************************************************************************************
******************************************************************************************************************************
step 3 :
Now when we make new commits in our local repository we just have to push the commits onto the github online using following command.
git push origin main		//pushing new commits done on master branch
******************************************************************************************************************************
******************************************************************************************************************************
//Cloning repository from github
******************************************************************************************************************************
******************************************************************************************************************************
step 1:
login github, create repo, add name, README.md file,etc. Now copy the link pointing to this github repository.
******************************************************************************************************************************
******************************************************************************************************************************
step 2:
go to the directory/folder (of your PC) where you want to create the local version of repository.
git clone copiedurl		// note that copiedurl has and extension as .git 
******************************************************************************************************************************
******************************************************************************************************************************
step 3:
cd repository_name		// enter the created directory of given repository name and start working on it like above. 
******************************************************************************************************************************
******************************************************************************************************************************
//working in collaboration
******************************************************************************************************************************
******************************************************************************************************************************
step 1:
git pull origin main		//update your local repository with the one hosted at github, so as to get cahnges done by
				//other collaborators in the code/contents of the repository.
Tip: Always try to use branches to edit/work on different parts of the project when collaborating.
After commiting any of your branches, don't try to directly merge into the master/parent branch. Because not all collaborators
will agree with your code and may suggest improvements. Instead push the edited/created branch to remote repository to be seen/
reviewed by your peers.
git push origin branchname	//pushes the given branch to remote repository.
******************************************************************************************************************************
******************************************************************************************************************************
Step 2: {pull request}
when you pushed the updated branch and want to merge it, do a pull request on github to merge the branch with master branch.
******************************************************************************************************************************
******************************************************************************************************************************
Step 3:{review and merge}
if you are a collaborator and want to review and merge others commit, you can do it with gui tools on github. You will be notified 
when someone does a commit and wants to merge their commited branch with master branch.
after merge you(as a reviewer) can delete the branch which no longer required.
if someone rejected your pull request then you can apply recommended changes on your branch and push it again and request again.
******************************************************************************************************************************
******************************************************************************************************************************
// deleting last n commits
******************************************************************************************************************************
******************************************************************************************************************************
Step 1:
To delete last 3 commits use:
git reset --hard HEAD~3            // for deleting last 4 use 4 instead of 3

Step 2:
Now force the remote repository (stored at github) to make the changes
git push -f origin main            // if deletion was on another branch then use that brance name

